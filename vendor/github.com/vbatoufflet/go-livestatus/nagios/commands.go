// Generated by go generate; DO NOT EDIT.

package nagios

import (
	"time"

	livestatus "github.com/vbatoufflet/go-livestatus"
)

// AcknowledgeHostProblem creates a new "ACKNOWLEDGE_HOST_PROBLEM" Nagios command.
//
// Allows you to acknowledge the current problem for the specified host.
//
// By acknowledging the current problem, future notifications (for the same host state) are disabled.
//
// If the "sticky" option is set to two (2), the acknowledgement will remain until the host returns to an UP state.
//
// Otherwise the acknowledgement will automatically be removed when the host changes state.
//
// If the "notify" option is set to one (1), a notification will be sent out to contacts indicating that the current
// host problem has been acknowledged.
//
// If the "persistent" option is set to one (1), the comment associated with the acknowledgement will survive across
// restarts of the Nagios process.
//
// If not, the comment will be deleted the next time Nagios restarts.
func AcknowledgeHostProblem(
	host_name string,
	sticky bool,
	notify bool,
	persistent bool,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ACKNOWLEDGE_HOST_PROBLEM",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("sticky", "bool", sticky),
		stringifyArg("notify", "bool", notify),
		stringifyArg("persistent", "bool", persistent),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// AcknowledgeSvcProblem creates a new "ACKNOWLEDGE_SVC_PROBLEM" Nagios command.
//
// Allows you to acknowledge the current problem for the specified service.
//
// By acknowledging the current problem, future notifications (for the same servicestate) are disabled.
//
// If the "sticky" option is set to two (2), the acknowledgement will remain until the service returns to an OK state.
//
// Otherwise the acknowledgement will automatically be removed when the service changes state.
//
// If the "notify" option is set to one (1), a notification will be sent out to contacts indicating that the current
// service problem has been acknowledged.
//
// If the "persistent" option is set to one (1), the comment associated with the acknowledgement will survive across
// restarts of the Nagios process.
//
// If not, the comment will be deleted the next time Nagios restarts.
func AcknowledgeSvcProblem(
	host_name string,
	service_description string,
	sticky bool,
	notify bool,
	persistent bool,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ACKNOWLEDGE_SVC_PROBLEM",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("sticky", "bool", sticky),
		stringifyArg("notify", "bool", notify),
		stringifyArg("persistent", "bool", persistent),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// AddHostComment creates a new "ADD_HOST_COMMENT" Nagios command.
//
// Adds a comment to a particular host.
//
// If the "persistent" field is set to zero (0), the comment will be deleted the next time Nagios is restarted.
//
// Otherwise, the comment will persist across program restarts until it is deleted manually.
func AddHostComment(
	host_name string,
	persistent bool,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ADD_HOST_COMMENT",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("persistent", "bool", persistent),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// AddSvcComment creates a new "ADD_SVC_COMMENT" Nagios command.
//
// Adds a comment to a particular service.
//
// If the "persistent" field is set to zero (0), the comment will be deleted the next time Nagios is restarted.
//
// Otherwise, the comment will persist across program restarts until it is deleted manually.
func AddSvcComment(
	host_name string,
	service_description string,
	persistent bool,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ADD_SVC_COMMENT",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("persistent", "bool", persistent),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ChangeContactHostNotificationTimeperiod creates a new "CHANGE_CONTACT_HOST_NOTIFICATION_TIMEPERIOD" Nagios command.
//
// Changes the host notification timeperiod for a particular contact to what is specified by the
// "notification_timeperiod" option.
//
// The "notification_timeperiod" option should be the short name of the timeperiod that is to be used as the contact's
// host notification timeperiod.
//
// The timeperiod must have been configured in Nagios before it was last (re)started.
func ChangeContactHostNotificationTimeperiod(
	contact_name string,
	notification_timeperiod string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CONTACT_HOST_NOTIFICATION_TIMEPERIOD",
		stringifyArg("contact_name", "string", contact_name),
		stringifyArg("notification_timeperiod", "string", notification_timeperiod),
	)
}

// ChangeContactModattr creates a new "CHANGE_CONTACT_MODATTR" Nagios command.
//
// This command changes the modified attributes value for the specified contact.
//
// Modified attributes values are used by Nagios to determine which object properties should be retained across program
// restarts.
//
// Thus, modifying the value of the attributes can affect data retention.
//
// This is an advanced option and should only be used by people who are intimately familiar with the data retention
// logic in Nagios.
func ChangeContactModattr(
	contact_name string,
	value string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CONTACT_MODATTR",
		stringifyArg("contact_name", "string", contact_name),
		stringifyArg("value", "string", value),
	)
}

// ChangeContactModhattr creates a new "CHANGE_CONTACT_MODHATTR" Nagios command.
//
// This command changes the modified host attributes value for the specified contact.
//
// Modified attributes values are used by Nagios to determine which object properties should be retained across program
// restarts.
//
// Thus, modifying the value of the attributes can affect data retention.
//
// This is an advanced option and should only be used by people who are intimately familiar with the data retention
// logic in Nagios.
func ChangeContactModhattr(
	contact_name string,
	value string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CONTACT_MODHATTR",
		stringifyArg("contact_name", "string", contact_name),
		stringifyArg("value", "string", value),
	)
}

// ChangeContactModsattr creates a new "CHANGE_CONTACT_MODSATTR" Nagios command.
//
// This command changes the modified service attributes value for the specified contact.
//
// Modified attributes values are used by Nagios to determine which object properties should be retained across program
// restarts.
//
// Thus, modifying the value of the attributes can affect data retention.
//
// This is an advanced option and should only be used by people who are intimately familiar with the data retention
// logic in Nagios.
func ChangeContactModsattr(
	contact_name string,
	value string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CONTACT_MODSATTR",
		stringifyArg("contact_name", "string", contact_name),
		stringifyArg("value", "string", value),
	)
}

// ChangeContactSvcNotificationTimeperiod creates a new "CHANGE_CONTACT_SVC_NOTIFICATION_TIMEPERIOD" Nagios command.
//
// Changes the service notification timeperiod for a particular contact to what is specified by the
// "notification_timeperiod" option.
//
// The "notification_timeperiod" option should be the short name of the timeperiod that is to be used as the contact's
// service notification timeperiod.
//
// The timeperiod must have been configured in Nagios before it was last (re)started.
func ChangeContactSvcNotificationTimeperiod(
	contact_name string,
	notification_timeperiod string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CONTACT_SVC_NOTIFICATION_TIMEPERIOD",
		stringifyArg("contact_name", "string", contact_name),
		stringifyArg("notification_timeperiod", "string", notification_timeperiod),
	)
}

// ChangeCustomContactVar creates a new "CHANGE_CUSTOM_CONTACT_VAR" Nagios command.
//
// Changes the value of a custom contact variable.
func ChangeCustomContactVar(
	contact_name string,
	varname string,
	varvalue string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CUSTOM_CONTACT_VAR",
		stringifyArg("contact_name", "string", contact_name),
		stringifyArg("varname", "string", varname),
		stringifyArg("varvalue", "string", varvalue),
	)
}

// ChangeCustomHostVar creates a new "CHANGE_CUSTOM_HOST_VAR" Nagios command.
//
// Changes the value of a custom host variable.
func ChangeCustomHostVar(
	host_name string,
	varname string,
	varvalue string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CUSTOM_HOST_VAR",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("varname", "string", varname),
		stringifyArg("varvalue", "string", varvalue),
	)
}

// ChangeCustomSvcVar creates a new "CHANGE_CUSTOM_SVC_VAR" Nagios command.
//
// Changes the value of a custom service variable.
func ChangeCustomSvcVar(
	host_name string,
	service_description string,
	varname string,
	varvalue string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_CUSTOM_SVC_VAR",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("varname", "string", varname),
		stringifyArg("varvalue", "string", varvalue),
	)
}

// ChangeGlobalHostEventHandler creates a new "CHANGE_GLOBAL_HOST_EVENT_HANDLER" Nagios command.
//
// Changes the global host event handler command to be that specified by the "event_handler_command" option.
//
// The "event_handler_command" option specifies the short name of the command that should be used as the new host event
// handler.
//
// The command must have been configured in Nagios before it was last (re)started.
func ChangeGlobalHostEventHandler(
	event_handler_command string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_GLOBAL_HOST_EVENT_HANDLER",
		stringifyArg("event_handler_command", "string", event_handler_command),
	)
}

// ChangeGlobalSvcEventHandler creates a new "CHANGE_GLOBAL_SVC_EVENT_HANDLER" Nagios command.
//
// Changes the global service event handler command to be that specified by the "event_handler_command" option.
//
// The "event_handler_command" option specifies the short name of the command that should be used as the new service
// event handler.
//
// The command must have been configured in Nagios before it was last (re)started.
func ChangeGlobalSvcEventHandler(
	event_handler_command string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_GLOBAL_SVC_EVENT_HANDLER",
		stringifyArg("event_handler_command", "string", event_handler_command),
	)
}

// ChangeHostCheckCommand creates a new "CHANGE_HOST_CHECK_COMMAND" Nagios command.
//
// Changes the check command for a particular host to be that specified by the "check_command" option.
//
// The "check_command" option specifies the short name of the command that should be used as the new host check
// command.
//
// The command must have been configured in Nagios before it was last (re)started.
func ChangeHostCheckCommand(
	host_name string,
	check_command string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_HOST_CHECK_COMMAND",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("check_command", "string", check_command),
	)
}

// ChangeHostCheckTimeperiod creates a new "CHANGE_HOST_CHECK_TIMEPERIOD" Nagios command.
//
// Changes the valid check period for the specified host.
func ChangeHostCheckTimeperiod(
	host_name string,
	timeperiod string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_HOST_CHECK_TIMEPERIOD",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("timeperiod", "string", timeperiod),
	)
}

// ChangeHostEventHandler creates a new "CHANGE_HOST_EVENT_HANDLER" Nagios command.
//
// Changes the event handler command for a particular host to be that specified by the "event_handler_command" option.
//
// The "event_handler_command" option specifies the short name of the command that should be used as the new host event
// handler.
//
// The command must have been configured in Nagios before it was last (re)started.
func ChangeHostEventHandler(
	host_name string,
	event_handler_command string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_HOST_EVENT_HANDLER",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("event_handler_command", "string", event_handler_command),
	)
}

// ChangeHostModattr creates a new "CHANGE_HOST_MODATTR" Nagios command.
//
// This command changes the modified attributes value for the specified host.
//
// Modified attributes values are used by Nagios to determine which object properties should be retained across program
// restarts.
//
// Thus, modifying the value of the attributes can affect data retention.
//
// This is an advanced option and should only be used by people who are intimately familiar with the data retention
// logic in Nagios.
func ChangeHostModattr(
	host_name string,
	value string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_HOST_MODATTR",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("value", "string", value),
	)
}

// ChangeMaxHostCheckAttempts creates a new "CHANGE_MAX_HOST_CHECK_ATTEMPTS" Nagios command.
//
// Changes the maximum number of check attempts (retries) for a particular host.
func ChangeMaxHostCheckAttempts(
	host_name string,
	check_attempts int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_MAX_HOST_CHECK_ATTEMPTS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("check_attempts", "int", check_attempts),
	)
}

// ChangeMaxSvcCheckAttempts creates a new "CHANGE_MAX_SVC_CHECK_ATTEMPTS" Nagios command.
//
// Changes the maximum number of check attempts (retries) for a particular service.
func ChangeMaxSvcCheckAttempts(
	host_name string,
	service_description string,
	check_attempts int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_MAX_SVC_CHECK_ATTEMPTS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_attempts", "int", check_attempts),
	)
}

// ChangeNormalHostCheckInterval creates a new "CHANGE_NORMAL_HOST_CHECK_INTERVAL" Nagios command.
//
// Changes the normal (regularly scheduled) check interval for a particular host.
func ChangeNormalHostCheckInterval(
	host_name string,
	check_interval time.Duration,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_NORMAL_HOST_CHECK_INTERVAL",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("check_interval", "time.Duration", check_interval),
	)
}

// ChangeNormalSvcCheckInterval creates a new "CHANGE_NORMAL_SVC_CHECK_INTERVAL" Nagios command.
//
// Changes the normal (regularly scheduled) check interval for a particular service
func ChangeNormalSvcCheckInterval(
	host_name string,
	service_description string,
	check_interval time.Duration,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_NORMAL_SVC_CHECK_INTERVAL",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_interval", "time.Duration", check_interval),
	)
}

// ChangeRetryHostCheckInterval creates a new "CHANGE_RETRY_HOST_CHECK_INTERVAL" Nagios command.
//
// Changes the retry check interval for a particular host.
func ChangeRetryHostCheckInterval(
	host_name string,
	service_description string,
	check_interval time.Duration,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_RETRY_HOST_CHECK_INTERVAL",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_interval", "time.Duration", check_interval),
	)
}

// ChangeRetrySvcCheckInterval creates a new "CHANGE_RETRY_SVC_CHECK_INTERVAL" Nagios command.
//
// Changes the retry check interval for a particular service.
func ChangeRetrySvcCheckInterval(
	host_name string,
	service_description string,
	check_interval time.Duration,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_RETRY_SVC_CHECK_INTERVAL",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_interval", "time.Duration", check_interval),
	)
}

// ChangeSvcCheckCommand creates a new "CHANGE_SVC_CHECK_COMMAND" Nagios command.
//
// Changes the check command for a particular service to be that specified by the "check_command" option.
//
// The "check_command" option specifies the short name of the command that should be used as the new service check
// command.
//
// The command must have been configured in Nagios before it was last (re)started.
func ChangeSvcCheckCommand(
	host_name string,
	service_description string,
	check_command string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_SVC_CHECK_COMMAND",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_command", "string", check_command),
	)
}

// ChangeSvcCheckTimeperiod creates a new "CHANGE_SVC_CHECK_TIMEPERIOD" Nagios command.
//
// Changes the check timeperiod for a particular service to what is specified by the "check_timeperiod" option.
//
// The "check_timeperiod" option should be the short name of the timeperod that is to be used as the service check
// timeperiod.
//
// The timeperiod must have been configured in Nagios before it was last (re)started.
func ChangeSvcCheckTimeperiod(
	host_name string,
	service_description string,
	check_timeperiod string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_SVC_CHECK_TIMEPERIOD",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_timeperiod", "string", check_timeperiod),
	)
}

// ChangeSvcEventHandler creates a new "CHANGE_SVC_EVENT_HANDLER" Nagios command.
//
// Changes the event handler command for a particular service to be that specified by the "event_handler_command"
// option.
//
// The "event_handler_command" option specifies the short name of the command that should be used as the new service
// event handler.
//
// The command must have been configured in Nagios before it was last (re)started.
func ChangeSvcEventHandler(
	host_name string,
	service_description string,
	event_handler_command string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_SVC_EVENT_HANDLER",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("event_handler_command", "string", event_handler_command),
	)
}

// ChangeSvcModattr creates a new "CHANGE_SVC_MODATTR" Nagios command.
//
// This command changes the modified attributes value for the specified service.
//
// Modified attributes values are used by Nagios to determine which object properties should be retained across program
// restarts.
//
// Thus, modifying the value of the attributes can affect data retention.
//
// This is an advanced option and should only be used by people who are intimately familiar with the data retention
// logic in Nagios.
func ChangeSvcModattr(
	host_name string,
	service_description string,
	value string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_SVC_MODATTR",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("value", "string", value),
	)
}

// ChangeSvcNotificationTimeperiod creates a new "CHANGE_SVC_NOTIFICATION_TIMEPERIOD" Nagios command.
//
// Changes the notification timeperiod for a particular service to what is specified by the "notification_timeperiod"
// option.
//
// The "notification_timeperiod" option should be the short name of the timeperiod that is to be used as the service
// notification timeperiod.
//
// The timeperiod must have been configured in Nagios before it was last (re)started.
func ChangeSvcNotificationTimeperiod(
	host_name string,
	service_description string,
	notification_timeperiod string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"CHANGE_SVC_NOTIFICATION_TIMEPERIOD",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("notification_timeperiod", "string", notification_timeperiod),
	)
}

// DelayHostNotification creates a new "DELAY_HOST_NOTIFICATION" Nagios command.
//
// Delays the next notification for a parciular service until "notification_time".
//
// The "notification_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
// Note that this will only have an affect if the service stays in the same problem state that it is currently in.
//
// If the service changes to another state, a new notification may go out before the time you specify in the
// "notification_time" argument.
func DelayHostNotification(
	host_name string,
	notification_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DELAY_HOST_NOTIFICATION",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("notification_time", "time.Time", notification_time),
	)
}

// DelaySvcNotification creates a new "DELAY_SVC_NOTIFICATION" Nagios command.
//
// Delays the next notification for a parciular service until "notification_time".
//
// The "notification_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
// Note that this will only have an affect if the service stays in the same problem state that it is currently in.
//
// If the service changes to another state, a new notification may go out before the time you specify in the
// "notification_time" argument.
func DelaySvcNotification(
	host_name string,
	service_description string,
	notification_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DELAY_SVC_NOTIFICATION",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("notification_time", "time.Time", notification_time),
	)
}

// DelAllHostComments creates a new "DEL_ALL_HOST_COMMENTS" Nagios command.
//
// Deletes all comments assocated with a particular host.
func DelAllHostComments(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DEL_ALL_HOST_COMMENTS",
		stringifyArg("host_name", "string", host_name),
	)
}

// DelAllSvcComments creates a new "DEL_ALL_SVC_COMMENTS" Nagios command.
//
// Deletes all comments associated with a particular service.
func DelAllSvcComments(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DEL_ALL_SVC_COMMENTS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// DelHostComment creates a new "DEL_HOST_COMMENT" Nagios command.
//
// Deletes a host comment.
//
// The id number of the comment that is to be deleted must be specified.
func DelHostComment(
	comment_id int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DEL_HOST_COMMENT",
		stringifyArg("comment_id", "int", comment_id),
	)
}

// DelHostDowntime creates a new "DEL_HOST_DOWNTIME" Nagios command.
//
// Deletes the host downtime entry that has an ID number matching the "downtime_id" argument.
//
// If the downtime is currently in effect, the host will come out of scheduled downtime (as long as there are no other
// overlapping active downtime entries).
func DelHostDowntime(
	downtime_id int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DEL_HOST_DOWNTIME",
		stringifyArg("downtime_id", "int", downtime_id),
	)
}

// DelSvcComment creates a new "DEL_SVC_COMMENT" Nagios command.
//
// Deletes a service comment.
//
// The id number of the comment that is to be deleted must be specified.
func DelSvcComment(
	comment_id int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DEL_SVC_COMMENT",
		stringifyArg("comment_id", "int", comment_id),
	)
}

// DelSvcDowntime creates a new "DEL_SVC_DOWNTIME" Nagios command.
//
// Deletes the service downtime entry that has an ID number matching the "downtime_id" argument.
//
// If the downtime is currently in effect, the service will come out of scheduled downtime (as long as there are no
// other overlapping active downtime entries).
func DelSvcDowntime(
	downtime_id int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DEL_SVC_DOWNTIME",
		stringifyArg("downtime_id", "int", downtime_id),
	)
}

// DisableAllNotificationsBeyondHost creates a new "DISABLE_ALL_NOTIFICATIONS_BEYOND_HOST" Nagios command.
//
// Disables notifications for all hosts and services "beyond" (e.g. on all child hosts of) the specified host.
//
// The current notification setting for the specified host is not affected.
func DisableAllNotificationsBeyondHost(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_ALL_NOTIFICATIONS_BEYOND_HOST",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableContactgroupHostNotifications creates a new "DISABLE_CONTACTGROUP_HOST_NOTIFICATIONS" Nagios command.
//
// Disables host notifications for all contacts in a particular contactgroup.
func DisableContactgroupHostNotifications(
	contactgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_CONTACTGROUP_HOST_NOTIFICATIONS",
		stringifyArg("contactgroup_name", "string", contactgroup_name),
	)
}

// DisableContactgroupSvcNotifications creates a new "DISABLE_CONTACTGROUP_SVC_NOTIFICATIONS" Nagios command.
//
// Disables service notifications for all contacts in a particular contactgroup.
func DisableContactgroupSvcNotifications(
	contactgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_CONTACTGROUP_SVC_NOTIFICATIONS",
		stringifyArg("contactgroup_name", "string", contactgroup_name),
	)
}

// DisableContactHostNotifications creates a new "DISABLE_CONTACT_HOST_NOTIFICATIONS" Nagios command.
//
// Disables host notifications for a particular contact.
func DisableContactHostNotifications(
	contact_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_CONTACT_HOST_NOTIFICATIONS",
		stringifyArg("contact_name", "string", contact_name),
	)
}

// DisableContactSvcNotifications creates a new "DISABLE_CONTACT_SVC_NOTIFICATIONS" Nagios command.
//
// Disables service notifications for a particular contact.
func DisableContactSvcNotifications(
	contact_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_CONTACT_SVC_NOTIFICATIONS",
		stringifyArg("contact_name", "string", contact_name),
	)
}

// DisableEventHandlers creates a new "DISABLE_EVENT_HANDLERS" Nagios command.
//
// Disables host and service event handlers on a program-wide basis.
func DisableEventHandlers() *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_EVENT_HANDLERS",
	)
}

// DisableFailurePrediction creates a new "DISABLE_FAILURE_PREDICTION" Nagios command.
//
// Disables failure prediction on a program-wide basis.
//
// This feature is not currently implemented in Nagios.
func DisableFailurePrediction() *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_FAILURE_PREDICTION",
	)
}

// DisableFlapDetection creates a new "DISABLE_FLAP_DETECTION" Nagios command.
//
// Disables host and service flap detection on a program-wide basis.
func DisableFlapDetection() *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_FLAP_DETECTION",
	)
}

// DisableHostgroupHostChecks creates a new "DISABLE_HOSTGROUP_HOST_CHECKS" Nagios command.
//
// Disables active checks for all hosts in a particular hostgroup.
func DisableHostgroupHostChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOSTGROUP_HOST_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// DisableHostgroupHostNotifications creates a new "DISABLE_HOSTGROUP_HOST_NOTIFICATIONS" Nagios command.
//
// Disables notifications for all hosts in a particular hostgroup.
//
// This does not disable notifications for the services associated with the hosts in the hostgroup - see the
// DISABLE_HOSTGROUP_SVC_NOTIFICATIONS command for that.
func DisableHostgroupHostNotifications(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOSTGROUP_HOST_NOTIFICATIONS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// DisableHostgroupPassiveHostChecks creates a new "DISABLE_HOSTGROUP_PASSIVE_HOST_CHECKS" Nagios command.
//
// Disables passive checks for all hosts in a particular hostgroup.
func DisableHostgroupPassiveHostChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOSTGROUP_PASSIVE_HOST_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// DisableHostgroupPassiveSvcChecks creates a new "DISABLE_HOSTGROUP_PASSIVE_SVC_CHECKS" Nagios command.
//
// Disables passive checks for all services associated with hosts in a particular hostgroup.
func DisableHostgroupPassiveSvcChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOSTGROUP_PASSIVE_SVC_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// DisableHostgroupSvcChecks creates a new "DISABLE_HOSTGROUP_SVC_CHECKS" Nagios command.
//
// Disables active checks for all services associated with hosts in a particular hostgroup.
func DisableHostgroupSvcChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOSTGROUP_SVC_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// DisableHostgroupSvcNotifications creates a new "DISABLE_HOSTGROUP_SVC_NOTIFICATIONS" Nagios command.
//
// Disables notifications for all services associated with hosts in a particular hostgroup.
//
// This does not disable notifications for the hosts in the hostgroup - see the DISABLE_HOSTGROUP_HOST_NOTIFICATIONS
// command for that.
func DisableHostgroupSvcNotifications(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOSTGROUP_SVC_NOTIFICATIONS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// DisableHostAndChildNotifications creates a new "DISABLE_HOST_AND_CHILD_NOTIFICATIONS" Nagios command.
//
// Disables notifications for the specified host, as well as all hosts "beyond" (e.g. on all child hosts of) the
// specified host.
func DisableHostAndChildNotifications(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_AND_CHILD_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableHostCheck creates a new "DISABLE_HOST_CHECK" Nagios command.
//
// Disables (regularly scheduled and on-demand) active checks of the specified host.
func DisableHostCheck(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_CHECK",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableHostEventHandler creates a new "DISABLE_HOST_EVENT_HANDLER" Nagios command.
//
// Disables the event handler for the specified host.
func DisableHostEventHandler(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_EVENT_HANDLER",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableHostFlapDetection creates a new "DISABLE_HOST_FLAP_DETECTION" Nagios command.
//
// Disables flap detection for the specified host.
func DisableHostFlapDetection(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_FLAP_DETECTION",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableHostFreshnessChecks creates a new "DISABLE_HOST_FRESHNESS_CHECKS" Nagios command.
//
// Disables freshness checks of all hosts on a program-wide basis.
func DisableHostFreshnessChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_FRESHNESS_CHECKS",
	)
}

// DisableHostNotifications creates a new "DISABLE_HOST_NOTIFICATIONS" Nagios command.
//
// Disables notifications for a particular host.
func DisableHostNotifications(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableHostSvcChecks creates a new "DISABLE_HOST_SVC_CHECKS" Nagios command.
//
// Enables active checks of all services on the specified host.
func DisableHostSvcChecks(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_SVC_CHECKS",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableHostSvcNotifications creates a new "DISABLE_HOST_SVC_NOTIFICATIONS" Nagios command.
//
// Disables notifications for all services on the specified host.
func DisableHostSvcNotifications(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_HOST_SVC_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisableNotifications creates a new "DISABLE_NOTIFICATIONS" Nagios command.
//
// Disables host and service notifications on a program-wide basis.
func DisableNotifications() *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_NOTIFICATIONS",
	)
}

// DisablePassiveHostChecks creates a new "DISABLE_PASSIVE_HOST_CHECKS" Nagios command.
//
// Disables acceptance and processing of passive host checks for the specified host.
func DisablePassiveHostChecks(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_PASSIVE_HOST_CHECKS",
		stringifyArg("host_name", "string", host_name),
	)
}

// DisablePassiveSvcChecks creates a new "DISABLE_PASSIVE_SVC_CHECKS" Nagios command.
//
// Disables passive checks for the specified service.
func DisablePassiveSvcChecks(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_PASSIVE_SVC_CHECKS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// DisablePerformanceData creates a new "DISABLE_PERFORMANCE_DATA" Nagios command.
//
// Disables the processing of host and service performance data on a program-wide basis.
func DisablePerformanceData() *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_PERFORMANCE_DATA",
	)
}

// DisableServicegroupHostChecks creates a new "DISABLE_SERVICEGROUP_HOST_CHECKS" Nagios command.
//
// Disables active checks for all hosts that have services that are members of a particular hostgroup.
func DisableServicegroupHostChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICEGROUP_HOST_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// DisableServicegroupHostNotifications creates a new "DISABLE_SERVICEGROUP_HOST_NOTIFICATIONS" Nagios command.
//
// Disables notifications for all hosts that have services that are members of a particular servicegroup.
func DisableServicegroupHostNotifications(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICEGROUP_HOST_NOTIFICATIONS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// DisableServicegroupPassiveHostChecks creates a new "DISABLE_SERVICEGROUP_PASSIVE_HOST_CHECKS" Nagios command.
//
// Disables the acceptance and processing of passive checks for all hosts that have services that are members of a
// particular service group.
func DisableServicegroupPassiveHostChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICEGROUP_PASSIVE_HOST_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// DisableServicegroupPassiveSvcChecks creates a new "DISABLE_SERVICEGROUP_PASSIVE_SVC_CHECKS" Nagios command.
//
// Disables the acceptance and processing of passive checks for all services in a particular servicegroup.
func DisableServicegroupPassiveSvcChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICEGROUP_PASSIVE_SVC_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// DisableServicegroupSvcChecks creates a new "DISABLE_SERVICEGROUP_SVC_CHECKS" Nagios command.
//
// Disables active checks for all services in a particular servicegroup.
func DisableServicegroupSvcChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICEGROUP_SVC_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// DisableServicegroupSvcNotifications creates a new "DISABLE_SERVICEGROUP_SVC_NOTIFICATIONS" Nagios command.
//
// Disables notifications for all services that are members of a particular servicegroup.
func DisableServicegroupSvcNotifications(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICEGROUP_SVC_NOTIFICATIONS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// DisableServiceFlapDetection creates a new "DISABLE_SERVICE_FLAP_DETECTION" Nagios command.
//
// Disables flap detection for the specified service.
func DisableServiceFlapDetection(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICE_FLAP_DETECTION",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// DisableServiceFreshnessChecks creates a new "DISABLE_SERVICE_FRESHNESS_CHECKS" Nagios command.
//
// Disables freshness checks of all services on a program-wide basis.
func DisableServiceFreshnessChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SERVICE_FRESHNESS_CHECKS",
	)
}

// DisableSvcCheck creates a new "DISABLE_SVC_CHECK" Nagios command.
//
// Disables active checks for a particular service.
func DisableSvcCheck(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SVC_CHECK",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// DisableSvcEventHandler creates a new "DISABLE_SVC_EVENT_HANDLER" Nagios command.
//
// Disables the event handler for the specified service.
func DisableSvcEventHandler(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SVC_EVENT_HANDLER",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// DisableSvcFlapDetection creates a new "DISABLE_SVC_FLAP_DETECTION" Nagios command.
//
// Disables flap detection for the specified service.
func DisableSvcFlapDetection(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SVC_FLAP_DETECTION",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// DisableSvcNotifications creates a new "DISABLE_SVC_NOTIFICATIONS" Nagios command.
//
// Disables notifications for a particular service.
func DisableSvcNotifications(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"DISABLE_SVC_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// EnableAllNotificationsBeyondHost creates a new "ENABLE_ALL_NOTIFICATIONS_BEYOND_HOST" Nagios command.
//
// Enables notifications for all hosts and services "beyond" (e.g. on all child hosts of) the specified host.
//
// The current notification setting for the specified host is not affected.
//
// Notifications will only be sent out for these hosts and services if notifications are also enabled on a program-wide
// basis.
func EnableAllNotificationsBeyondHost(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_ALL_NOTIFICATIONS_BEYOND_HOST",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableContactgroupHostNotifications creates a new "ENABLE_CONTACTGROUP_HOST_NOTIFICATIONS" Nagios command.
//
// Enables host notifications for all contacts in a particular contactgroup.
func EnableContactgroupHostNotifications(
	contactgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_CONTACTGROUP_HOST_NOTIFICATIONS",
		stringifyArg("contactgroup_name", "string", contactgroup_name),
	)
}

// EnableContactgroupSvcNotifications creates a new "ENABLE_CONTACTGROUP_SVC_NOTIFICATIONS" Nagios command.
//
// Enables service notifications for all contacts in a particular contactgroup.
func EnableContactgroupSvcNotifications(
	contactgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_CONTACTGROUP_SVC_NOTIFICATIONS",
		stringifyArg("contactgroup_name", "string", contactgroup_name),
	)
}

// EnableContactHostNotifications creates a new "ENABLE_CONTACT_HOST_NOTIFICATIONS" Nagios command.
//
// Enables host notifications for a particular contact.
func EnableContactHostNotifications(
	contact_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_CONTACT_HOST_NOTIFICATIONS",
		stringifyArg("contact_name", "string", contact_name),
	)
}

// EnableContactSvcNotifications creates a new "ENABLE_CONTACT_SVC_NOTIFICATIONS" Nagios command.
//
// Disables service notifications for a particular contact.
func EnableContactSvcNotifications(
	contact_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_CONTACT_SVC_NOTIFICATIONS",
		stringifyArg("contact_name", "string", contact_name),
	)
}

// EnableEventHandlers creates a new "ENABLE_EVENT_HANDLERS" Nagios command.
//
// Enables host and service event handlers on a program-wide basis.
func EnableEventHandlers() *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_EVENT_HANDLERS",
	)
}

// EnableFailurePrediction creates a new "ENABLE_FAILURE_PREDICTION" Nagios command.
//
// Enables failure prediction on a program-wide basis.
//
// This feature is not currently implemented in Nagios.
func EnableFailurePrediction() *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_FAILURE_PREDICTION",
	)
}

// EnableFlapDetection creates a new "ENABLE_FLAP_DETECTION" Nagios command.
//
// Enables host and service flap detection on a program-wide basis.
func EnableFlapDetection() *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_FLAP_DETECTION",
	)
}

// EnableHostgroupHostChecks creates a new "ENABLE_HOSTGROUP_HOST_CHECKS" Nagios command.
//
// Enables active checks for all hosts in a particular hostgroup.
func EnableHostgroupHostChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOSTGROUP_HOST_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// EnableHostgroupHostNotifications creates a new "ENABLE_HOSTGROUP_HOST_NOTIFICATIONS" Nagios command.
//
// Enables notifications for all hosts in a particular hostgroup.
//
// This does not enable notifications for the services associated with the hosts in the hostgroup - see the
// ENABLE_HOSTGROUP_SVC_NOTIFICATIONS command for that.
//
// In order for notifications to be sent out for these hosts, notifications must be enabled on a program-wide basis as
// well.
func EnableHostgroupHostNotifications(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOSTGROUP_HOST_NOTIFICATIONS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// EnableHostgroupPassiveHostChecks creates a new "ENABLE_HOSTGROUP_PASSIVE_HOST_CHECKS" Nagios command.
//
// Enables passive checks for all hosts in a particular hostgroup.
func EnableHostgroupPassiveHostChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOSTGROUP_PASSIVE_HOST_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// EnableHostgroupPassiveSvcChecks creates a new "ENABLE_HOSTGROUP_PASSIVE_SVC_CHECKS" Nagios command.
//
// Enables passive checks for all services associated with hosts in a particular hostgroup.
func EnableHostgroupPassiveSvcChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOSTGROUP_PASSIVE_SVC_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// EnableHostgroupSvcChecks creates a new "ENABLE_HOSTGROUP_SVC_CHECKS" Nagios command.
//
// Enables active checks for all services associated with hosts in a particular hostgroup.
func EnableHostgroupSvcChecks(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOSTGROUP_SVC_CHECKS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// EnableHostgroupSvcNotifications creates a new "ENABLE_HOSTGROUP_SVC_NOTIFICATIONS" Nagios command.
//
// Enables notifications for all services that are associated with hosts in a particular hostgroup.
//
// This does not enable notifications for the hosts in the hostgroup - see the ENABLE_HOSTGROUP_HOST_NOTIFICATIONS
// command for that.
//
// In order for notifications to be sent out for these services, notifications must be enabled on a program-wide basis
// as well.
func EnableHostgroupSvcNotifications(
	hostgroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOSTGROUP_SVC_NOTIFICATIONS",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
	)
}

// EnableHostAndChildNotifications creates a new "ENABLE_HOST_AND_CHILD_NOTIFICATIONS" Nagios command.
//
// Enables notifications for the specified host, as well as all hosts "beyond" (e.g. on all child hosts of) the
// specified host.
//
// Notifications will only be sent out for these hosts if notifications are also enabled on a program-wide basis.
func EnableHostAndChildNotifications(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_AND_CHILD_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableHostCheck creates a new "ENABLE_HOST_CHECK" Nagios command.
//
// Enables (regularly scheduled and on-demand) active checks of the specified host.
func EnableHostCheck(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_CHECK",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableHostEventHandler creates a new "ENABLE_HOST_EVENT_HANDLER" Nagios command.
//
// Enables the event handler for the specified host.
func EnableHostEventHandler(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_EVENT_HANDLER",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableHostFlapDetection creates a new "ENABLE_HOST_FLAP_DETECTION" Nagios command.
//
// Enables flap detection for the specified host.
//
// In order for the flap detection algorithms to be run for the host, flap detection must be enabled on a program-wide
// basis as well.
func EnableHostFlapDetection(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_FLAP_DETECTION",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableHostFreshnessChecks creates a new "ENABLE_HOST_FRESHNESS_CHECKS" Nagios command.
//
// Enables freshness checks of all hosts on a program-wide basis.
//
// Individual hosts that have freshness checks disabled will not be checked for freshness.
func EnableHostFreshnessChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_FRESHNESS_CHECKS",
	)
}

// EnableHostNotifications creates a new "ENABLE_HOST_NOTIFICATIONS" Nagios command.
//
// Enables notifications for a particular host.
//
// Notifications will be sent out for the host only if notifications are enabled on a program-wide basis as well.
func EnableHostNotifications(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableHostSvcChecks creates a new "ENABLE_HOST_SVC_CHECKS" Nagios command.
//
// Enables active checks of all services on the specified host.
func EnableHostSvcChecks(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_SVC_CHECKS",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableHostSvcNotifications creates a new "ENABLE_HOST_SVC_NOTIFICATIONS" Nagios command.
//
// Enables notifications for all services on the specified host.
//
// Note that notifications will not be sent out if notifications are disabled on a program-wide basis.
func EnableHostSvcNotifications(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_HOST_SVC_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnableNotifications creates a new "ENABLE_NOTIFICATIONS" Nagios command.
//
// Enables host and service notifications on a program-wide basis.
func EnableNotifications() *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_NOTIFICATIONS",
	)
}

// EnablePassiveHostChecks creates a new "ENABLE_PASSIVE_HOST_CHECKS" Nagios command.
//
// Enables acceptance and processing of passive host checks for the specified host.
func EnablePassiveHostChecks(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_PASSIVE_HOST_CHECKS",
		stringifyArg("host_name", "string", host_name),
	)
}

// EnablePassiveSvcChecks creates a new "ENABLE_PASSIVE_SVC_CHECKS" Nagios command.
//
// Enables passive checks for the specified service.
func EnablePassiveSvcChecks(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_PASSIVE_SVC_CHECKS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// EnablePerformanceData creates a new "ENABLE_PERFORMANCE_DATA" Nagios command.
//
// Enables the processing of host and service performance data on a program-wide basis.
func EnablePerformanceData() *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_PERFORMANCE_DATA",
	)
}

// EnableServicegroupHostChecks creates a new "ENABLE_SERVICEGROUP_HOST_CHECKS" Nagios command.
//
// Enables active checks for all hosts that have services that are members of a particular hostgroup.
func EnableServicegroupHostChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SERVICEGROUP_HOST_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// EnableServicegroupHostNotifications creates a new "ENABLE_SERVICEGROUP_HOST_NOTIFICATIONS" Nagios command.
//
// Enables notifications for all hosts that have services that are members of a particular servicegroup.
//
// In order for notifications to be sent out for these hosts, notifications must also be enabled on a program-wide
// basis.
func EnableServicegroupHostNotifications(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SERVICEGROUP_HOST_NOTIFICATIONS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// EnableServicegroupPassiveHostChecks creates a new "ENABLE_SERVICEGROUP_PASSIVE_HOST_CHECKS" Nagios command.
//
// Enables the acceptance and processing of passive checks for all hosts that have services that are members of a
// particular service group.
func EnableServicegroupPassiveHostChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SERVICEGROUP_PASSIVE_HOST_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// EnableServicegroupPassiveSvcChecks creates a new "ENABLE_SERVICEGROUP_PASSIVE_SVC_CHECKS" Nagios command.
//
// Enables the acceptance and processing of passive checks for all services in a particular servicegroup.
func EnableServicegroupPassiveSvcChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SERVICEGROUP_PASSIVE_SVC_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// EnableServicegroupSvcChecks creates a new "ENABLE_SERVICEGROUP_SVC_CHECKS" Nagios command.
//
// Enables active checks for all services in a particular servicegroup.
func EnableServicegroupSvcChecks(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SERVICEGROUP_SVC_CHECKS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// EnableServicegroupSvcNotifications creates a new "ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS" Nagios command.
//
// Enables notifications for all services that are members of a particular servicegroup.
//
// In order for notifications to be sent out for these services, notifications must also be enabled on a program-wide
// basis.
func EnableServicegroupSvcNotifications(
	servicegroup_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
	)
}

// EnableServiceFreshnessChecks creates a new "ENABLE_SERVICE_FRESHNESS_CHECKS" Nagios command.
//
// Enables freshness checks of all services on a program-wide basis.
//
// Individual services that have freshness checks disabled will not be checked for freshness.
func EnableServiceFreshnessChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SERVICE_FRESHNESS_CHECKS",
	)
}

// EnableSvcCheck creates a new "ENABLE_SVC_CHECK" Nagios command.
//
// Enables active checks for a particular service.
func EnableSvcCheck(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SVC_CHECK",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// EnableSvcEventHandler creates a new "ENABLE_SVC_EVENT_HANDLER" Nagios command.
//
// Enables the event handler for the specified service.
func EnableSvcEventHandler(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SVC_EVENT_HANDLER",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// EnableSvcFlapDetection creates a new "ENABLE_SVC_FLAP_DETECTION" Nagios command.
//
// Enables flap detection for the specified service.
//
// In order for the flap detection algorithms to be run for the service, flap detection must be enabled on a
// program-wide basis as well.
func EnableSvcFlapDetection(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SVC_FLAP_DETECTION",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// EnableSvcNotifications creates a new "ENABLE_SVC_NOTIFICATIONS" Nagios command.
//
// Enables notifications for a particular service.
//
// Notifications will be sent out for the service only if notifications are enabled on a program-wide basis as well.
func EnableSvcNotifications(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"ENABLE_SVC_NOTIFICATIONS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// ProcessFile creates a new "PROCESS_FILE" Nagios command.
//
// Directs Nagios to process all external commands that are found in the file specified by the <file_name> argument.
//
// If the <delete> option is non-zero, the file will be deleted once it has been processes.
//
// If the <delete> option is set to zero, the file is left untouched.
func ProcessFile(
	file_name string,
	delete bool,
) *livestatus.Command {
	return livestatus.NewCommand(
		"PROCESS_FILE",
		stringifyArg("file_name", "string", file_name),
		stringifyArg("delete", "bool", delete),
	)
}

// ProcessHostCheckResult creates a new "PROCESS_HOST_CHECK_RESULT" Nagios command.
//
// This is used to submit a passive check result for a particular host.
//
// The "status_code" indicates the state of the host check and should be one of the following: 0=UP, 1=DOWN,
// 2=UNREACHABLE.
//
// The "plugin_output" argument contains the text returned from the host check, along with optional performance data.
func ProcessHostCheckResult(
	host_name string,
	status_code int,
	plugin_output string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"PROCESS_HOST_CHECK_RESULT",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("status_code", "int", status_code),
		stringifyArg("plugin_output", "string", plugin_output),
	)
}

// ProcessServiceCheckResult creates a new "PROCESS_SERVICE_CHECK_RESULT" Nagios command.
//
// This is used to submit a passive check result for a particular service.
//
// The "return_code" field should be one of the following: 0=OK, 1=WARNING, 2=CRITICAL, 3=UNKNOWN.
//
// The "plugin_output" field contains text output from the service check, along with optional performance data.
func ProcessServiceCheckResult(
	host_name string,
	service_description string,
	return_code int,
	plugin_output string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"PROCESS_SERVICE_CHECK_RESULT",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("return_code", "int", return_code),
		stringifyArg("plugin_output", "string", plugin_output),
	)
}

// ReadStateInformation creates a new "READ_STATE_INFORMATION" Nagios command.
//
// Causes Nagios to load all current monitoring status information from the state retention file.
//
// Normally, state retention information is loaded when the Nagios process starts up and before it starts monitoring.
//
// WARNING: This command will cause Nagios to discard all current monitoring status information and use the information
// stored in state retention file!
//
// Use with care.
func ReadStateInformation() *livestatus.Command {
	return livestatus.NewCommand(
		"READ_STATE_INFORMATION",
	)
}

// RemoveHostAcknowledgement creates a new "REMOVE_HOST_ACKNOWLEDGEMENT" Nagios command.
//
// This removes the problem acknowledgement for a particular host.
//
// Once the acknowledgement has been removed, notifications can once again be sent out for the given host.
func RemoveHostAcknowledgement(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"REMOVE_HOST_ACKNOWLEDGEMENT",
		stringifyArg("host_name", "string", host_name),
	)
}

// RemoveSvcAcknowledgement creates a new "REMOVE_SVC_ACKNOWLEDGEMENT" Nagios command.
//
// This removes the problem acknowledgement for a particular service.
//
// Once the acknowledgement has been removed, notifications can once again be sent out for the given service.
func RemoveSvcAcknowledgement(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"REMOVE_SVC_ACKNOWLEDGEMENT",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// RestartProgram creates a new "RESTART_PROGRAM" Nagios command.
//
// Restarts the Nagios process.
func RestartProgram() *livestatus.Command {
	return livestatus.NewCommand(
		"RESTART_PROGRAM",
	)
}

// SaveStateInformation creates a new "SAVE_STATE_INFORMATION" Nagios command.
//
// Causes Nagios to save all current monitoring status information to the state retention file.
//
// Normally, state retention information is saved before the Nagios process shuts down and (potentially) at regularly
// scheduled intervals.
//
// This command allows you to force Nagios to save this information to the state retention file immediately.
//
// This does not affect the current status information in the Nagios process.
func SaveStateInformation() *livestatus.Command {
	return livestatus.NewCommand(
		"SAVE_STATE_INFORMATION",
	)
}

// ScheduleAndPropagateHostDowntime creates a new "SCHEDULE_AND_PROPAGATE_HOST_DOWNTIME" Nagios command.
//
// Schedules downtime for a specified host and all of its children (hosts).
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The specified (parent) host downtime can be triggered by another downtime entry if the "trigger_id" is set to the ID
// of another scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the specified (parent) host should not be triggered by
// another downtime entry.
func ScheduleAndPropagateHostDowntime(
	host_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_AND_PROPAGATE_HOST_DOWNTIME",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleAndPropagateTriggeredHostDowntime creates a new "SCHEDULE_AND_PROPAGATE_TRIGGERED_HOST_DOWNTIME" Nagios command.
//
// Schedules downtime for a specified host and all of its children (hosts).
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// Downtime for child hosts are all set to be triggered by the downtime for the specified (parent) host.
//
// The specified (parent) host downtime can be triggered by another downtime entry if the "trigger_id" is set to the ID
// of another scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the specified (parent) host should not be triggered by
// another downtime entry.
func ScheduleAndPropagateTriggeredHostDowntime(
	host_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_AND_PROPAGATE_TRIGGERED_HOST_DOWNTIME",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleForcedHostCheck creates a new "SCHEDULE_FORCED_HOST_CHECK" Nagios command.
//
// Schedules a forced active check of a particular host at "check_time".
//
// The "check_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
//  Forced checks are performed regardless of what time it is (e.g. timeperiod restrictions are ignored) and whether or
// not active checks are enabled on a host-specific or program-wide basis.
func ScheduleForcedHostCheck(
	host_name string,
	check_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_FORCED_HOST_CHECK",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("check_time", "time.Time", check_time),
	)
}

// ScheduleForcedHostSvcChecks creates a new "SCHEDULE_FORCED_HOST_SVC_CHECKS" Nagios command.
//
// Schedules a forced active check of all services associated with a particular host at "check_time".
//
// The "check_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
//  Forced checks are performed regardless of what time it is (e.g. timeperiod restrictions are ignored) and whether or
// not active checks are enabled on a service-specific or program-wide basis.
func ScheduleForcedHostSvcChecks(
	host_name string,
	check_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_FORCED_HOST_SVC_CHECKS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("check_time", "time.Time", check_time),
	)
}

// ScheduleForcedSvcCheck creates a new "SCHEDULE_FORCED_SVC_CHECK" Nagios command.
//
// Schedules a forced active check of a particular service at "check_time".
//
// The "check_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
//  Forced checks are performed regardless of what time it is (e.g. timeperiod restrictions are ignored) and whether or
// not active checks are enabled on a service-specific or program-wide basis.
func ScheduleForcedSvcCheck(
	host_name string,
	service_description string,
	check_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_FORCED_SVC_CHECK",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_time", "time.Time", check_time),
	)
}

// ScheduleHostgroupHostDowntime creates a new "SCHEDULE_HOSTGROUP_HOST_DOWNTIME" Nagios command.
//
// Schedules downtime for all hosts in a specified hostgroup.
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The host downtime entries can be triggered by another downtime entry if the "trigger_id" is set to the ID of another
// scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the hosts should not be triggered by another downtime
// entry.
func ScheduleHostgroupHostDowntime(
	hostgroup_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_HOSTGROUP_HOST_DOWNTIME",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleHostgroupSvcDowntime creates a new "SCHEDULE_HOSTGROUP_SVC_DOWNTIME" Nagios command.
//
// Schedules downtime for all services associated with hosts in a specified servicegroup.
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The service downtime entries can be triggered by another downtime entry if the "trigger_id" is set to the ID of
// another scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the services should not be triggered by another
// downtime entry.
func ScheduleHostgroupSvcDowntime(
	hostgroup_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_HOSTGROUP_SVC_DOWNTIME",
		stringifyArg("hostgroup_name", "string", hostgroup_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleHostCheck creates a new "SCHEDULE_HOST_CHECK" Nagios command.
//
// Schedules the next active check of a particular host at "check_time".
//
// The "check_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
// Note that the host may not actually be checked at the time you specify.
//
// This could occur for a number of reasons: active checks are disabled on a program-wide or service-specific basis,
// the host is already scheduled to be checked at an earlier time, etc.
//
// If you want to force the host check to occur at the time you specify, look at the SCHEDULE_FORCED_HOST_CHECK
// command.
func ScheduleHostCheck(
	host_name string,
	check_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_HOST_CHECK",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("check_time", "time.Time", check_time),
	)
}

// ScheduleHostDowntime creates a new "SCHEDULE_HOST_DOWNTIME" Nagios command.
//
// Schedules downtime for a specified host.
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The specified host downtime can be triggered by another downtime entry if the "trigger_id" is set to the ID of
// another scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the specified host should not be triggered by another
// downtime entry.
func ScheduleHostDowntime(
	host_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_HOST_DOWNTIME",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleHostSvcChecks creates a new "SCHEDULE_HOST_SVC_CHECKS" Nagios command.
//
// Schedules the next active check of all services on a particular host at "check_time".
//
// The "check_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
// Note that the services may not actually be checked at the time you specify.
//
// This could occur for a number of reasons: active checks are disabled on a program-wide or service-specific basis,
// the services are already scheduled to be checked at an earlier time, etc.
//
// If you want to force the service checks to occur at the time you specify, look at the
// SCHEDULE_FORCED_HOST_SVC_CHECKS command.
func ScheduleHostSvcChecks(
	host_name string,
	check_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_HOST_SVC_CHECKS",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("check_time", "time.Time", check_time),
	)
}

// ScheduleHostSvcDowntime creates a new "SCHEDULE_HOST_SVC_DOWNTIME" Nagios command.
//
// Schedules downtime for all services associated with a particular host.
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The service downtime entries can be triggered by another downtime entry if the "trigger_id" is set to the ID of
// another scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the services should not be triggered by another
// downtime entry.
func ScheduleHostSvcDowntime(
	host_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_HOST_SVC_DOWNTIME",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleServicegroupHostDowntime creates a new "SCHEDULE_SERVICEGROUP_HOST_DOWNTIME" Nagios command.
//
// Schedules downtime for all hosts that have services in a specified servicegroup.
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The host downtime entries can be triggered by another downtime entry if the "trigger_id" is set to the ID of another
// scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the hosts should not be triggered by another downtime
// entry.
func ScheduleServicegroupHostDowntime(
	servicegroup_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_SERVICEGROUP_HOST_DOWNTIME",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleServicegroupSvcDowntime creates a new "SCHEDULE_SERVICEGROUP_SVC_DOWNTIME" Nagios command.
//
// Schedules downtime for all services in a specified servicegroup.
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The service downtime entries can be triggered by another downtime entry if the "trigger_id" is set to the ID of
// another scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the services should not be triggered by another
// downtime entry.
func ScheduleServicegroupSvcDowntime(
	servicegroup_name string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_SERVICEGROUP_SVC_DOWNTIME",
		stringifyArg("servicegroup_name", "string", servicegroup_name),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// ScheduleSvcCheck creates a new "SCHEDULE_SVC_CHECK" Nagios command.
//
// Schedules the next active check of a specified service at "check_time".
//
// The "check_time" argument is specified in time_t format (seconds since the UNIX epoch).
//
// Note that the service may not actually be checked at the time you specify.
//
// This could occur for a number of reasons: active checks are disabled on a program-wide or service-specific basis,
// the service is already scheduled to be checked at an earlier time, etc.
//
// If you want to force the service check to occur at the time you specify, look at the SCHEDULE_FORCED_SVC_CHECK
// command.
func ScheduleSvcCheck(
	host_name string,
	service_description string,
	check_time time.Time,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_SVC_CHECK",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("check_time", "time.Time", check_time),
	)
}

// ScheduleSvcDowntime creates a new "SCHEDULE_SVC_DOWNTIME" Nagios command.
//
// Schedules downtime for a specified service.
//
// If the "fixed" argument is set to one (1), downtime will start and end at the times specified by the "start" and
// "end" arguments.
//
// Otherwise, downtime will begin between the "start" and "end" times and last for "duration" seconds.
//
// The "start" and "end" arguments are specified in time_t format (seconds since the UNIX epoch).
//
// The specified service downtime can be triggered by another downtime entry if the "trigger_id" is set to the ID of
// another scheduled downtime entry.
//
// Set the "trigger_id" argument to zero (0) if the downtime for the specified service should not be triggered by
// another downtime entry.
func ScheduleSvcDowntime(
	host_name string,
	service_description string,
	start_time time.Time,
	end_time time.Time,
	fixed bool,
	trigger_id int,
	duration time.Duration,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SCHEDULE_SVC_DOWNTIME",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("start_time", "time.Time", start_time),
		stringifyArg("end_time", "time.Time", end_time),
		stringifyArg("fixed", "bool", fixed),
		stringifyArg("trigger_id", "int", trigger_id),
		stringifyArg("duration", "time.Duration", duration),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// SendCustomHostNotification creates a new "SEND_CUSTOM_HOST_NOTIFICATION" Nagios command.
//
// Allows you to send a custom host notification.
//
// Very useful in dire situations, emergencies or to communicate with all admins that are responsible for a particular
// host.
//
// When the host notification is sent out, the $NOTIFICATIONTYPE$ macro will be set to "CUSTOM".
//
// The <options> field is a logical OR of the following integer values that affect aspects of the notification that are
// sent out: 0 = No option (default), 1 = Broadcast (send notification to all normal and all escalated contacts for the
// host), 2 = Forced (notification is sent out regardless of current time, whether or not notifications are enabled,
// etc.), 4 = Increment current notification # for the host (this is not done by default for custom notifications).
//
// The comment field can be used with the
// $NOTIFICATIONCOMMENT$ macro in notification commands.
func SendCustomHostNotification(
	host_name string,
	options int,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SEND_CUSTOM_HOST_NOTIFICATION",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("options", "int", options),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// SendCustomSvcNotification creates a new "SEND_CUSTOM_SVC_NOTIFICATION" Nagios command.
//
// Allows you to send a custom service notification.
//
// Very useful in dire situations, emergencies or to communicate with all admins that are responsible for a particular
// service.
//
// When the service notification is sent out, the $NOTIFICATIONTYPE$ macro will be set to "CUSTOM".
//
// The <options> field is a logical OR of the following integer values that affect aspects of the notification that are
// sent out: 0 = No option (default), 1 = Broadcast (send notification to all normal and all escalated contacts for the
// service), 2 = Forced (notification is sent out regardless of current time, whether or not notifications are enabled,
// etc.), 4 = Increment current notification # for the service(this is not done by default for custom notifications).
//
//  The comment field can be used with the
// $NOTIFICATIONCOMMENT$ macro in notification commands.
func SendCustomSvcNotification(
	host_name string,
	service_description string,
	options int,
	author string,
	comment string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SEND_CUSTOM_SVC_NOTIFICATION",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("options", "int", options),
		stringifyArg("author", "string", author),
		stringifyArg("comment", "string", comment),
	)
}

// SetHostNotificationNumber creates a new "SET_HOST_NOTIFICATION_NUMBER" Nagios command.
//
// Sets the current notification number for a particular host.
//
// A value of 0 indicates that no notification has yet been sent for the current host problem.
//
// Useful for forcing an escalation (based on notification number) or replicating notification information in redundant
// monitoring environments. Notification numbers greater than zero have no noticeable affect on the notification
// process if the host is currently in an UP state.
func SetHostNotificationNumber(
	host_name string,
	notification_number int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SET_HOST_NOTIFICATION_NUMBER",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("notification_number", "int", notification_number),
	)
}

// SetSvcNotificationNumber creates a new "SET_SVC_NOTIFICATION_NUMBER" Nagios command.
//
// Sets the current notification number for a particular service.
//
// A value of 0 indicates that no notification has yet been sent for the current service problem.
//
// Useful for forcing an escalation (based on notification number) or replicating notification information in redundant
// monitoring environments. Notification numbers greater than zero have no noticeable affect on the notification
// process if the service is currently in an OK state.
func SetSvcNotificationNumber(
	host_name string,
	service_description string,
	notification_number int,
) *livestatus.Command {
	return livestatus.NewCommand(
		"SET_SVC_NOTIFICATION_NUMBER",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
		stringifyArg("notification_number", "int", notification_number),
	)
}

// ShutdownProgram creates a new "SHUTDOWN_PROGRAM" Nagios command.
//
// Shuts down the Nagios process.
func ShutdownProgram() *livestatus.Command {
	return livestatus.NewCommand(
		"SHUTDOWN_PROGRAM",
	)
}

// StartAcceptingPassiveHostChecks creates a new "START_ACCEPTING_PASSIVE_HOST_CHECKS" Nagios command.
//
// Enables acceptance and processing of passive host checks on a program-wide basis.
func StartAcceptingPassiveHostChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"START_ACCEPTING_PASSIVE_HOST_CHECKS",
	)
}

// StartAcceptingPassiveSvcChecks creates a new "START_ACCEPTING_PASSIVE_SVC_CHECKS" Nagios command.
//
// Enables passive service checks on a program-wide basis.
func StartAcceptingPassiveSvcChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"START_ACCEPTING_PASSIVE_SVC_CHECKS",
	)
}

// StartExecutingHostChecks creates a new "START_EXECUTING_HOST_CHECKS" Nagios command.
//
// Enables active host checks on a program-wide basis.
func StartExecutingHostChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"START_EXECUTING_HOST_CHECKS",
	)
}

// StartExecutingSvcChecks creates a new "START_EXECUTING_SVC_CHECKS" Nagios command.
//
// Enables active checks of services on a program-wide basis.
func StartExecutingSvcChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"START_EXECUTING_SVC_CHECKS",
	)
}

// StartObsessingOverHost creates a new "START_OBSESSING_OVER_HOST" Nagios command.
//
// Enables processing of host checks via the OCHP command for the specified host.
func StartObsessingOverHost(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"START_OBSESSING_OVER_HOST",
		stringifyArg("host_name", "string", host_name),
	)
}

// StartObsessingOverHostChecks creates a new "START_OBSESSING_OVER_HOST_CHECKS" Nagios command.
//
// Enables processing of host checks via the OCHP command on a program-wide basis.
func StartObsessingOverHostChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"START_OBSESSING_OVER_HOST_CHECKS",
	)
}

// StartObsessingOverSvc creates a new "START_OBSESSING_OVER_SVC" Nagios command.
//
// Enables processing of service checks via the OCSP command for the specified service.
func StartObsessingOverSvc(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"START_OBSESSING_OVER_SVC",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// StartObsessingOverSvcChecks creates a new "START_OBSESSING_OVER_SVC_CHECKS" Nagios command.
//
// Enables processing of service checks via the OCSP command on a program-wide basis.
func StartObsessingOverSvcChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"START_OBSESSING_OVER_SVC_CHECKS",
	)
}

// StopAcceptingPassiveHostChecks creates a new "STOP_ACCEPTING_PASSIVE_HOST_CHECKS" Nagios command.
//
// Disables acceptance and processing of passive host checks on a program-wide basis.
func StopAcceptingPassiveHostChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_ACCEPTING_PASSIVE_HOST_CHECKS",
	)
}

// StopAcceptingPassiveSvcChecks creates a new "STOP_ACCEPTING_PASSIVE_SVC_CHECKS" Nagios command.
//
// Disables passive service checks on a program-wide basis.
func StopAcceptingPassiveSvcChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_ACCEPTING_PASSIVE_SVC_CHECKS",
	)
}

// StopExecutingHostChecks creates a new "STOP_EXECUTING_HOST_CHECKS" Nagios command.
//
// Disables active host checks on a program-wide basis.
func StopExecutingHostChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_EXECUTING_HOST_CHECKS",
	)
}

// StopExecutingSvcChecks creates a new "STOP_EXECUTING_SVC_CHECKS" Nagios command.
//
// Disables active checks of services on a program-wide basis.
func StopExecutingSvcChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_EXECUTING_SVC_CHECKS",
	)
}

// StopObsessingOverHost creates a new "STOP_OBSESSING_OVER_HOST" Nagios command.
//
// Disables processing of host checks via the OCHP command for the specified host.
func StopObsessingOverHost(
	host_name string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_OBSESSING_OVER_HOST",
		stringifyArg("host_name", "string", host_name),
	)
}

// StopObsessingOverHostChecks creates a new "STOP_OBSESSING_OVER_HOST_CHECKS" Nagios command.
//
// Disables processing of host checks via the OCHP command on a program-wide basis.
func StopObsessingOverHostChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_OBSESSING_OVER_HOST_CHECKS",
	)
}

// StopObsessingOverSvc creates a new "STOP_OBSESSING_OVER_SVC" Nagios command.
//
// Disables processing of service checks via the OCSP command for the specified service.
func StopObsessingOverSvc(
	host_name string,
	service_description string,
) *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_OBSESSING_OVER_SVC",
		stringifyArg("host_name", "string", host_name),
		stringifyArg("service_description", "string", service_description),
	)
}

// StopObsessingOverSvcChecks creates a new "STOP_OBSESSING_OVER_SVC_CHECKS" Nagios command.
//
// Disables processing of service checks via the OCSP command on a program-wide basis.
func StopObsessingOverSvcChecks() *livestatus.Command {
	return livestatus.NewCommand(
		"STOP_OBSESSING_OVER_SVC_CHECKS",
	)
}
